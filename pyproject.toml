[tool.poetry]
name = "pro_sports_transactions"
version = "1.0.0"
description = "A Python Library for Consuming Transactions from Pro Sports Transactions (https://www.prosportstransactions.com)"
license = "MIT"
authors = ["Randy Forbes <randy.forbes@gmail.com>"]
readme = "README.md"
maintainers = ["Randy Forbes <randy.forbes@gmail.com>"]
repository = "https://github.com/rsforbes/pro_sports_transactions"
documentation = "https://github.com/rsforbes/pro_sports_transactions/blob/main/README.md"
keywords = ["api", "basketball", "baseball", "data", "data science", "draft", "fines", "football", "hockey", "injuries", "mlb", "mls", "nba", "nfl", "nhl", "prosports", "prosportstransactions", "pro sports", "pro sports transactions", "soccer","sports", "stats", "trades", "transactions"]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Software Development"
]

[tool.poetry.dependencies]
python = "^3.11"
aiohttp = "^3.8.4"
pandas = "^2.0.0"
brotli = "^1.0.9"
lxml = "^4.9.2"
html5lib = "^1.1"
bs4 = "^0.0.1"
cloudscraper = {git = "https://github.com/VeNoMouS/cloudscraper.git", rev = "refs/pull/295/head"}

[tool.poetry.group.dev.dependencies]
black = "^23.3.0"
flake8 = "^6.0.0"
pytest = "^7.3.1"
pytest-asyncio = "^0.21.0"
pytest-mock = "^3.10.0"
pytest-cov = "^4.1.0"
radon = "^6.0.1"
flake8-cognitive-complexity = "^0.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = [
  "src"
]

[tool.coverage.run]
# Enable branch coverage to ensure all conditional paths are tested
# This catches untested else branches and exception handlers
branch = true

# Only measure coverage for our source code, not dependencies
source = ["src/pro_sports_transactions"]

# Files to exclude from coverage measurement:
omit = [
    "*/tests/*",      # Test files themselves don't need coverage
    "*/test_*",       # Any test files regardless of location
    "*/__init__.py",  # Init files are usually empty or just imports
    "*/setup.py",     # Build configuration doesn't need testing
    "*/conftest.py"   # Pytest configuration file
]

[tool.coverage.report]
# Lines to exclude from coverage reporting:
exclude_lines = [
    "pragma: no cover",           # Explicit coverage exclusion marker
    "def __repr__",              # String representation methods are for debugging
    "if self.debug:",            # Debug-only code paths
    "raise AssertionError",      # Defensive programming assertions
    "raise NotImplementedError", # Abstract method stubs
    "if 0:",                     # Unreachable code blocks
    "if __name__ == .__main__.:", # Script entry points
    "@(abc.)?abstractmethod"     # Abstract method declarations
]

# Show 2 decimal places in coverage percentages for precision
precision = 2

# Show all files, even those with 100% coverage (helps verify what's tested)
skip_covered = false

# Show line numbers of missing coverage in the report
show_missing = true

# Fail if coverage drops below 80% - this maintains our minimum standard
fail_under = 80

[tool.coverage.html]
# Directory for HTML coverage reports - useful for detailed analysis
directory = "htmlcov"

[tool.coverage.xml]
# XML output for CI/CD integration and coverage badges
output = "coverage.xml"
